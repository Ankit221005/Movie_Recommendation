
# coding: utf-8

# In[122]:


import pandas as pd
import numpy as np
df1=pd.read_csv('tmdb_5000_credits.csv')
df2=pd.read_csv('tmdb_5000_movies.csv')
print(df1.head(5))
print(df1.shape)
df1[['title']].head(5)


# In[123]:


print(df2.head(5))
print(df2.shape)
'''The first dataset contains the following features:-

    movie_id - A unique identifier for each movie.
    cast - The name of lead and supporting actors.
    crew - The name of Director, Editor, Composer, Writer etc.

The second dataset has the following features:-

    budget - The budget in which the movie was made.
    genre - The genre of the movie, Action, Comedy ,Thriller etc.
    homepage - A link to the homepage of the movie.
    id - This is infact the movie_id as in the first dataset.
    keywords - The keywords or tags related to the movie.
    original_language - The language in which the movie was made.
    original_title - The title of the movie before translation or adaptation.
    overview - A brief description of the movie.
    popularity - A numeric quantity specifying the movie popularity.
    production_companies - The production house of the movie.
    production_countries - The country in which it was produced.
    release_date - The date on which it was released.
    revenue - The worldwide revenue generated by the movie.
    runtime - The running time of the movie in minutes.
    status - "Released" or "Rumored".
    tagline - Movie's tagline.
    title - Title of the movie.
    vote_average - average ratings the movie recieved.
    vote_count - the count of votes recieved.
'''


# In[124]:


df1.columns=['id','title','cast','crew'] 
df=df2.merge(df1,on='id') #https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html
#Merge DataFrame objects by performing a database-style join operation by columns or indexes.
#print(df1.shape) shape of both of them remail unchanged
df['title_x'].head(2)


# In[125]:


C=df['vote_average'].mean()
C


# In[126]:


m=df['vote_count'].quantile(0.9) #for a movie to feature in the charts, it must have more votes than at least 90% of the movies in the list
m 


# In[127]:


df=df.copy().loc[df['vote_count']>=m]
print(df.shape)


# In[128]:


def Rating(x,m=m,C=C):
    v=x['vote_count']   # v is the number of votes for the movie
    R=x['vote_average']  # R is the average rating of the movie
    # Calculation based on the IMDB formula
    return (v/(v+m)*R)+(m/(m+v)*C)


# In[129]:


# Define a new feature 'score' and calculate its value with rating()
df['score']=df.apply(Rating, axis=1) #Apply a function along an axis of the DataFrame.


# In[132]:


df=df.sort_values('score', ascending=False)
#    0 or ‘index’: apply function to each column.
 #   1 or ‘columns’: apply function to each row.


# In[137]:


df[['original_title','score','release_date']].head(10)

